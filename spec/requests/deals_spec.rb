require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/deals', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Deal. As you add validations to Deal, be sure to
  # adjust the attributes here as well.
  let(:user) { User.create!(name: 'Amira', email: 'amira@gmail.com', password: '123456') }
  let(:category) { Category.create!(name: 'Food', icon: 'https://cdn-icons-png.flaticon.com/512/706/706164.png', user_id: user.id) }

  let(:valid_attributes) do
    {
      name: 'Apple',
      amount: 100,
      category:,
      user:
    }
  end

  let(:invalid_attributes) do
    {
      name: '',
      amount: '',
      category: '',
      user: ''
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      sign_in user
      Deal.create! valid_attributes
      get category_deals_url(category)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      sign_in user
      get new_category_deal_path(category)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Deal' do
        sign_in user
        expect do
          post category_deals_path(category), params: { deal: valid_attributes }
        end.to change(Deal, :count).by(1)
      end

      it 'redirects to the deals of that category' do
        sign_in user
        post category_deals_path(category), params: { deal: valid_attributes }
        expect(response).to redirect_to(category_deals_path(category))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Deal' do
        sign_in user
        expect do
          post category_deals_path(category), params: { deal: invalid_attributes }
        end.to change(Deal, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        sign_in user
        post category_deals_path(category), params: { deal: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested deal' do
      sign_in user
      deal = Deal.create! valid_attributes
      expect do
        delete category_deal_path(category, deal)
      end.to change(Deal, :count).by(-1)
    end

    it 'redirects to the deals list' do
      sign_in user
      deal = Deal.create! valid_attributes
      delete category_deal_path(category, deal)
      expect(response).to redirect_to(category_deals_path(category))
    end
  end
end
